name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - 'push-action/**'

jobs:

  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools

        while IFS="" read -r line || [ -n "${line}" ]; do
            if [[ "${line}" =~ ^pre-commit.*$ ]]; then
                pre_commit="${line}"
            fi
        done < requirements_dev.txt

        pip install ${pre_commit}

    - name: Test with pre-commit
      run: pre-commit run --all-files -c .ci/.pre-commit-config.yaml || ( git status --short ; git diff ; exit 1 )

  pytest:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        backend: ['django', 'sqlalchemy']

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_${{ matrix.backend }}
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version}}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version}}

    - name: Install python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools
        pip install -e .[testing]
        reentry scan

    - name: Setup up environment for AiiDA
      env:
        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
      run: .github/aiida/setup_aiida.sh

    - name: Test with pytest
      env:
        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
        AIIDA_TEST_PROFILE: test_${{ matrix.backend }}
        AIIDA_PROFILE: test_${{ matrix.backend }}
      run: pytest -v --cov=./aiida_optimade/ --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == 3.8
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: pytest
        file: ./coverage.xml

  docker-image:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_django
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools

        while IFS="" read -r line || [ -n "${line}" ]; do
            if [[ "${line}" =~ ^aiida-core.*$ ]]; then
                aiida_core="${line}"
            fi
        done < requirements.txt

        pip install ${aiida_core}
        reentry scan

    - name: Setup up environment for AiiDA
      env:
        AIIDA_TEST_BACKEND: django
      run: .github/aiida/setup_aiida.sh

    - name: Load test data
      run: verdi import --migration --non-interactive .github/aiida/optimade.aiida

    - name: Build and start the Docker image
      run: |
        export DOCKER_HOST_IP=$(ip route | grep docker0 | awk '{print $9}')
        docker-compose -f profiles/docker-compose.yml up &
        .github/workflows/wait_for_it.sh localhost:3253 -t 360
        sleep 15

    - name: Test server with OPTIMADE Validator
      uses: Materials-Consortia/optimade-validator-action@v2
      with:
        port: 3253
        all versioned paths: yes
        validator version: v0.12.0

  build-package:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check build and install source distribution
        uses: CasperWA/check-sdist-action@v1

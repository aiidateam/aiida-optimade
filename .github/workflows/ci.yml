name: aiida-optimade

on: [push, pull_request]

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  pre-commit:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        pip install pre-commit

    - name: Test with pre-commit
      run: pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  pytest:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        backend: ['django', 'sqlalchemy']

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_${{ matrix.backend }}
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version}}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version}}

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        pip install -e .[testing]
        reentry scan

    - name: Setup up environment for AiiDA
      env:
        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
      run: .github/workflows/setup_aiida.sh

    - name: Load test data
      run: verdi import --migration --non-interactive .github/aiida/optimade.aiida

    - name: Test with pytest
      env:
        AIIDA_PROFILE: test_${{ matrix.backend }}
        OPTIMADE_CONFIG_FILE: ./aiida_optimade/config.json
      run: pytest --cov=./aiida_optimade/ --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == 3.7
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        xml: ./coverage.xml
        flags: unittests
        yml: ./.codecov.yml

  docker-image:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_django
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        pip install -e .
        reentry scan

    - name: Setup up environment for AiiDA
      env:
        AIIDA_TEST_BACKEND: django
      run: .github/workflows/setup_aiida.sh

    - name: Load test data
      run: verdi import --migration --non-interactive .github/aiida/optimade.aiida

    - name: Build and start the Docker image
      run: |
        export DOCKER_HOST_IP=$(ip route | grep docker0 | awk '{print $9}')
        docker-compose -f profiles/docker-compose.yml up &
        .github/workflows/wait_for_it.sh localhost:3253 -t 360
        sleep 15

    - name: Test base URL - vMAJOR
      run: |
        curl http://localhost:3253/v0/info > info.json
        grep -F '"data":{' info.json || ( cat info.json; exit 1 )
        grep -F 'aiida-optimade' info.json || ( cat info.json; exit 1 )
        curl http://localhost:3253/v0/structures/1 > structure.json
        grep -F '"dimension_types":[' structure.json || ( cat structure.json; exit 1 )

    - name: Test base URL - vMAJOR.MINOR
      run: |
        curl http://localhost:3253/v0.10/info > info.json
        grep -F '"data":{' info.json || ( cat info.json; exit 1 )
        grep -F 'aiida-optimade' info.json || ( cat info.json; exit 1 )
        curl http://localhost:3253/v0.10/structures/1 > structure.json
        grep -F '"dimension_types":[' structure.json || ( cat structure.json; exit 1 )

    - name: Test base URL - vMAJOR.MINOR.PATCH
      run: |
        curl http://localhost:3253/v0.10.1/info > info.json
        grep -F '"data":{' info.json || ( cat info.json; exit 1 )
        grep -F 'aiida-optimade' info.json || ( cat info.json; exit 1 )
        curl http://localhost:3253/v0.10.1/structures/1 > structure.json
        grep -F '"dimension_types":[' structure.json || ( cat structure.json; exit 1 )
